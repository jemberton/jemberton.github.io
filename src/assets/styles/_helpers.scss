// TODO Add method to handle text colors as links. It should handle hover colors 

//@=============================================================================
//@ Globals
//@=============================================================================

$global-font-size: 11pt;
$global-font-family: 'Fira Code', monospace;
$global-font-family-retina: 'Fira Sans', sans-serif;

//@=============================================================================
//@ Variable Arrays
//@=============================================================================

//# SIZE_NAME LAYOUT_SIZE TEXT_SIZE
$sizes: 
    "xxs" "0.25" "0.5",
    "xs" "0.5" "0.7",
    "sm" "0.75" "0.9",
    "md" "1.0" "1.0",
    "lg" "1.25" "1.25",
    "xl" "1.5" "1.5",
    "xxl" "2.0" "2.0";

$shadows:
    "lowest" "0 1px 1px 1px rgba(0,0,0,0.2)",
    "lower" "0 1px 2px 1px rgba(0,0,0,0.2)",
    "low" "0 1px 4px 1px rgba(0,0,0,0.2)",
    "high" "0 1px 6px 2px rgba(0,0,0,0.3)",
    "higher" "0 2px 6px 3px rgba(0,0,0,0.3)",
    "highest" "0 3px 8px 4px rgba(0,0,0,0.3)";

$filters:
    "grayscale" "grayscale(60%)",
    "bw" "grayscale(100%)";

$borders:
    "thin" "1px solid",
    "thick" "3px solid";

$letter-spacings:
    "narrow" "-1",
    "wide" "1";

$headings:
    "h1" "1.75",
    "h2" "1.5",
    "h3" "1.25",
    "h4" "1.1",
    "h5" "1.0",
    "h6" "0.9";

$alignments:
    "start",
    "end",
    "center";

$faces:
    "t" "top",
    "b" "bottom",
    "r" "right",
    "l" "left";

//@=============================================================================
//@ Iterative Classes
//@=============================================================================

@each $border_name, $border in $borders {
    .border-#{$border_name} { border: #{$border} transparent; }
}
.border { border: 2px solid transparent; }

//# Build colors from Catppuccin Mocha
//# bg text
@each $color_name, $color_hex, $hover in $mocha {
    .bg-#{$color_name} { background: $color_hex; }
    .border-#{$color_name} { border-color: $color_hex; }
    .text-#{$color_name} { color: $color_hex; }
    a {
        &.text-#{$color_name} { 
            color: $color_hex;

            &:hover { color: $hover; }
        }
    }

    @each $face_letter, $face in $faces {
        .border-#{$face_letter}-#{$color_name} { border-#{$face}-color: $color_hex; }
    }
}

//# Build size based classes
//# text p rounded
@each $size_name, $size, $text_size in $sizes {
    .text-#{$size_name} { font-size: #{$text_size}em; }
    .p-#{$size_name} { padding: #{$size}em; }
    .m-#{$size_name} { margin: #{$size}em; }
    .rounded-#{$size_name} { border-radius: #{$size}em; }
    .gap-#{$size_name} { gap: #{$size}em; }

    @each $face_letter, $face in $faces {
        .p#{$face_letter}-#{$size_name} { padding-#{$face}: #{$size}em; }
        .m#{$face_letter}-#{$size_name} { margin-#{$face}: #{$size}em; }
    }

    .px-#{$size_name} { padding-left: #{$size}em; padding-right: #{$size}em; }
    .py-#{$size_name} { padding-top: #{$size}em; padding-bottom: #{$size}em; }
    .mx-#{$size_name} { margin-left: #{$size}em; margin-right: #{$size}em; }
    .my-#{$size_name} { margin-top: #{$size}em; margin-bottom: #{$size}em; }
}
.rounded { border-radius: 1.0em; }
.p-font { padding: $global-font-size; }
.m-font { margin: $global-font-size; }

@each $face_letter, $face in $faces {
    .p#{$face_letter}-none { padding-#{$face}: 0; }
    .m#{$face_letter}-none { margin-#{$face}: 0; }
}

@each $shadow_name, $shadow in $shadows {
    .shadow-#{$shadow_name} { box-shadow: #{$shadow}; }
}
.shadow { box-shadow: 0 1px 4px 2px rgba(0,0,0,0.2); }

@each $filter_name, $filter in $filters {
    .filter-#{$filter_name} { filter: #{$filter}; }
}

@each $letter_name, $spacing in $letter-spacings {
    .letter-#{$letter_name} { letter-spacing: #{$spacing}px; }
}

@each $heading, $size in $headings {
    #{$heading} { font-size: #{$size}em; }
}

@each $alignment in $alignments {
    .justify-#{$alignment} { justify-content: #{$alignment}; }
    .align-#{$alignment} { align-items: #{$alignment}; }
}

@for $percent from 1 through 9 {
    .w-#{$percent * 10} { width: #{$percent * 10}#{"%"}; }
    .h-#{$percent * 10} { height: #{$percent * 10}#{"%"}; }
}
.w-full { width: 100%; }
.h-full { height: 100%; }

//@=============================================================================
//@ Static Classes
//@=============================================================================

.gutters-v { margin: 1em 0; }
.gutters-h { margin: 0 1em; }
.gutters { margin: 1em; }

.grow { flex-grow: 1; }
.shrink { flex-grow: 0; }

.row { flex-direction: row; }
.column { flex-direction: column; }

.font-mono { font-family: $global-font-family; }
.font-retina { font-family: $global-font-family-retina; }

.font-bold { font-weight: bold; }

.circle { clip-path: circle(40%); }



.md-img {
    padding: 0; margin: 0;
    margin-bottom: calc($global-font-size * 2);
    justify-content: center; align-items: center;

    img {
        max-width: 100%;
        padding: 0;
        margin: 0;
        border-radius: inherit;
        margin-bottom: calc($global-font-size / 2);
    }
}

.md-a {
    color: $red;
    padding: 0; margin: 0;
    margin-bottom: $global-font-size;
}

.sheet {
    display: flex; position: relative;
    flex-direction: column;
    flex-grow: 1;
}

.card {
    display: flex; position: relative;
    margin: 1em 0;
    flex-direction: column;
    background: $mantle;
}

.button {
    span {
        z-index: 2;
    }

    &:hover {
        cursor: pointer;

        &::before {
            content: "";
            margin: 0; padding: 0;
            position: absolute;
            background: inherit;
            filter: saturate(0.5);
            display: flex;
            border-radius: inherit;
            width: 100%; height: 100%;
            z-index: 1;
        }
    }
}